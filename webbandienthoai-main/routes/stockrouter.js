const router = require('express').Router()
const { ProductSizeStock } = require('../models/ProductSizeStockmodel');
const ChitietSp = require('../models/chitietSpModel');
const DungLuong = require('../models/DungLuongModel');
const MauSac = require('../models/MauSacModel');
const LoaiSP = require('../models/LoaiSanPham');


router.post('/stock/add', async (req, res) => {
  try {
    console.log("üöÄ D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ request:", req.body);

    let { productId, dungluongId, mausacId, quantity } = req.body;

    // Ki·ªÉm tra productId (b·∫Øt bu·ªôc)
    if (!productId) {
      return res.status(400).json({ message: "Thi·∫øu productId" });
    }

    // N·∫øu dungluongId ho·∫∑c mausacId l√† r·ªóng (""), th√¨ ƒë·∫∑t th√†nh null
    if (!dungluongId) dungluongId = null;
    if (!mausacId) mausacId = null;

    let existingStock = await ProductSizeStock.findOne({ productId, dungluongId, mausacId });

    if (!existingStock) {
      const sku = `${productId}-${dungluongId || 'default'}-${mausacId || 'default'}`;
      const newStock = new ProductSizeStock({
        productId,
        dungluongId,
        mausacId,
        quantity: quantity !== undefined ? quantity : null,
        sku
      });
      await newStock.save();
      return res.status(201).json({ message: "Th√™m t·ªìn kho th√†nh c√¥ng", stock: newStock });
    } else {
      existingStock.quantity = quantity;
      await existingStock.save();
      return res.status(200).json({ message: "S·ªë l∆∞·ª£ng t·ªìn kho ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh", stock: existingStock });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'L·ªói c·∫≠p nh·∫≠t t·ªìn kho', error });
  }
});

router.get('/stock/:productId/:dungluongId/:mausacId', async (req, res) => {
  try {
    const { productId, dungluongId, mausacId } = req.params;
    const stock = await ProductSizeStock.findOne({ productId, dungluongId, mausacId });
    console.log(stock);
    if (!stock) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y t·ªìn kho' });

    res.json({
      stock: stock.unlimitedStock ? 'Kh√¥ng gi·ªõi h·∫°n' : stock.quantity,
      unlimitedStock: stock.unlimitedStock
    });

  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'L·ªói l·∫•y t·ªìn kho', error });
  }
});
// Thay ƒë·ªïi trong routes/stockrouter.js
// C·∫≠p nh·∫≠t route /stock/update
router.post('/stock/update', async (req, res) => {
  const session = await db.mongoose.startSession();
  session.startTransaction();
  
  try {
    const { productId, dungluongId, mausacId, quantity } = req.body;
    
    // T√¨m v√† ki·ªÉm tra t·ªìn kho trong m·ªôt transaction
    const stock = await ProductSizeStock.findOne({
      productId,
      dungluongId: dungluongId || null,
      mausacId: mausacId || null
    }).session(session);
    
    if (!stock) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ s·∫£n ph·∫©m" });
    }
    
    if (!stock.unlimitedStock && stock.quantity < quantity) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: "H√†ng t·ªìn kho kh√¥ng ƒë·ªß" });
    }
    
    // C·∫≠p nh·∫≠t t·ªìn kho
    if (!stock.unlimitedStock) {
      stock.quantity -= quantity;
      await stock.save({ session });
    }
    
    await session.commitTransaction();
    session.endSession();
    
    return res.status(200).json({ 
      message: "C·∫≠p nh·∫≠t t·ªìn kho th√†nh c√¥ng", 
      stock: stock.unlimitedStock ? 'Kh√¥ng gi·ªõi h·∫°n' : stock.quantity 
    });
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    console.error(error);
    return res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t t·ªìn kho", error: error.message });
  }
});

module.exports = router