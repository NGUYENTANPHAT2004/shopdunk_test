const router = require('express').Router()
const { ProductSizeStock } = require('../models/ProductSizeStockmodel');
const ChitietSp = require('../models/chitietSpModel');
const DungLuong = require('../models/DungLuongModel');
const MauSac = require('../models/MauSacModel');
const LoaiSP = require('../models/LoaiSanPham');
router.get('/tonkho/sanpham', async (req, res) => {
  try {
    // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
    const sanphams = await ChitietSp.ChitietSp.find().lean();

    // X·ª≠ l√Ω t·ª´ng s·∫£n ph·∫©m
    const productList = await Promise.all(
      sanphams.map(async (product) => {
        try {
          // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
          const productExists = await ChitietSp.ChitietSp.findById(product._id);
          if (!productExists) {
            return null; // B·ªè qua n·∫øu s·∫£n ph·∫©m ƒë√£ b·ªã x√≥a
          }

          // L·∫•y danh s√°ch dung l∆∞·ª£ng c·ªßa s·∫£n ph·∫©m
          const dungluongs = await DungLuong.dungluong.find({ idloaisp: product.idloaisp }).lean();

          // N·∫øu kh√¥ng c√≥ dung l∆∞·ª£ng n√†o, b·ªè qua s·∫£n ph·∫©m n√†y
          if (!dungluongs || dungluongs.length === 0) {
            return null;
          }

          // X·ª≠ l√Ω m·ªói dung l∆∞·ª£ng v√† m√†u s·∫Øc
          const dungLuongData = await Promise.all(
            dungluongs.map(async (dungluong) => {
              try {
                // Ki·ªÉm tra dung l∆∞·ª£ng c√≥ t·ªìn t·∫°i kh√¥ng
                const dungluongExists = await DungLuong.dungluong.findById(dungluong._id);
                if (!dungluongExists) {
                  return null; // B·ªè qua n·∫øu dung l∆∞·ª£ng ƒë√£ b·ªã x√≥a
                }

                // L·∫•y t·∫•t c·∫£ m√†u s·∫Øc cho dung l∆∞·ª£ng n√†y
                const mausacs = await MauSac.mausac.find({ dungluong: dungluong._id }).lean();

                if (!mausacs || mausacs.length === 0) {
                  return null; // B·ªè qua n·∫øu kh√¥ng c√≥ m√†u s·∫Øc
                }

                // X·ª≠ l√Ω t·ª´ng m√†u s·∫Øc
                const mausacData = await Promise.all(
                  mausacs.map(async (mausac) => {
                    try {
                      // Ki·ªÉm tra m√†u s·∫Øc c√≥ t·ªìn t·∫°i kh√¥ng
                      const mausacExists = await MauSac.mausac.findById(mausac._id);
                      if (!mausacExists) {
                        return null; // B·ªè qua n·∫øu m√†u s·∫Øc ƒë√£ b·ªã x√≥a
                      }

                      // T√¨m th√¥ng tin t·ªìn kho cho s·∫£n ph·∫©m/dung l∆∞·ª£ng/m√†u s·∫Øc
                      const stock = await ProductSizeStock.findOne({
                        productId: product._id,
                        dungluongId: dungluong._id,
                        mausacId: mausac._id
                      }).lean();

                      return {
                        _id: mausac._id,
                        name: mausac.name,
                        price: mausac.price || 0,
                        images: mausac.image || [],
                        quantity: stock ? stock.quantity || 0 : 0, // ƒê·∫£m b·∫£o quantity kh√¥ng b·ªã null
                      };
                    } catch (error) {
                      console.error(`L·ªói khi x·ª≠ l√Ω m√†u s·∫Øc ${mausac._id}:`, error);
                      return null;
                    }
                  })
                );

                // L·ªçc ra m√†u s·∫Øc h·ª£p l·ªá (kh√¥ng null)
                const validMauSacData = mausacData.filter(ms => ms !== null);

                if (validMauSacData.length === 0) {
                  return null; // B·ªè qua dung l∆∞·ª£ng n·∫øu kh√¥ng c√≥ m√†u s·∫Øc h·ª£p l·ªá
                }

                return {
                  _id: dungluong._id,
                  name: dungluong.name,
                  mausac: validMauSacData
                };
              } catch (error) {
                console.error(`L·ªói khi x·ª≠ l√Ω dung l∆∞·ª£ng ${dungluong._id}:`, error);
                return null;
              }
            })
          );

          // L·ªçc ra dung l∆∞·ª£ng h·ª£p l·ªá (kh√¥ng null)
          const filteredDungLuongData = dungLuongData.filter(dl => dl !== null);

          // N·∫øu kh√¥ng c√≥ dung l∆∞·ª£ng h·ª£p l·ªá, b·ªè qua s·∫£n ph·∫©m n√†y
          if (filteredDungLuongData.length === 0) {
            return null;
          }

          return {
            _id: product._id,
            name: product.name,
            image: product.image,
            price: product.price,
            dungluong: filteredDungLuongData
          };
        } catch (error) {
          console.error(`L·ªói khi x·ª≠ l√Ω s·∫£n ph·∫©m ${product._id}:`, error);
          return null;
        }
      })
    );

    // L·ªçc ra c√°c s·∫£n ph·∫©m h·ª£p l·ªá (kh√¥ng null)
    const filteredProductList = productList.filter(product => product !== null);

    res.json(filteredProductList);
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
});



router.post('/stock/add', async (req, res) => {
  try {
    console.log("üöÄ D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ request:", req.body);

    let { productId, dungluongId, mausacId, quantity } = req.body;

    // Ki·ªÉm tra productId (b·∫Øt bu·ªôc)
    if (!productId) {
      return res.status(400).json({ message: "Thi·∫øu productId" });
    }

    // N·∫øu dungluongId ho·∫∑c mausacId l√† r·ªóng (""), th√¨ ƒë·∫∑t th√†nh null
    if (!dungluongId) dungluongId = null;
    if (!mausacId) mausacId = null;

    let existingStock = await ProductSizeStock.findOne({ productId, dungluongId, mausacId });

    if (!existingStock) {
      const sku = `${productId}-${dungluongId || 'default'}-${mausacId || 'default'}`;
      const newStock = new ProductSizeStock({
        productId,
        dungluongId,
        mausacId,
        quantity: quantity !== undefined ? quantity : null,
        sku
      });
      await newStock.save();
      return res.status(201).json({ message: "Th√™m t·ªìn kho th√†nh c√¥ng", stock: newStock });
    } else {
      existingStock.quantity = quantity;
      await existingStock.save();
      return res.status(200).json({ message: "S·ªë l∆∞·ª£ng t·ªìn kho ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh", stock: existingStock });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'L·ªói c·∫≠p nh·∫≠t t·ªìn kho', error });
  }
});

router.get('/stock/:productId/:dungluongId/:mausacId', async (req, res) => {
  try {
    const { productId, dungluongId, mausacId } = req.params;
    const stock = await ProductSizeStock.findOne({ productId, dungluongId, mausacId });

    if (!stock) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y t·ªìn kho' });

    res.json({
      stock: stock.unlimitedStock ? 'Kh√¥ng gi·ªõi h·∫°n' : stock.quantity,
      unlimitedStock: stock.unlimitedStock
    });

  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'L·ªói l·∫•y t·ªìn kho', error });
  }
});
// Thay ƒë·ªïi trong routes/stockrouter.js
// C·∫≠p nh·∫≠t route /stock/update
router.post('/stock/update', async (req, res) => {
  try {
    const { productId, dungluongId, mausacId, quantity } = req.body;

    if (!productId) {
      return res.status(400).json({ message: "Thi·∫øu productId" });
    }

    // Th·ª±c hi·ªán atomic update - ki·ªÉm tra v√† c·∫≠p nh·∫≠t trong c√πng m·ªôt thao t√°c
    const result = await ProductSizeStock.findOneAndUpdate(
      { 
        productId, 
        dungluongId: dungluongId || null, 
        mausacId: mausacId || null,
        $or: [
          { unlimitedStock: true },
          { quantity: { $gte: quantity } }
        ]
      },
      { 
        $inc: { quantity: -quantity } 
      },
      { 
        new: true,  // Tr·∫£ v·ªÅ document ƒë√£ c·∫≠p nh·∫≠t
        runValidators: true  // ƒê·∫£m b·∫£o r√†ng bu·ªôc v·∫´n ƒë∆∞·ª£c √°p d·ª•ng
      }
    );

    if (!result) {
      return res.status(400).json({ message: "H√†ng t·ªìn kho kh√¥ng ƒë·ªß ho·∫∑c kh√¥ng t√¨m th·∫•y" });
    }

    res.status(200).json({ 
      message: "C·∫≠p nh·∫≠t t·ªìn kho th√†nh c√¥ng", 
      stock: result.unlimitedStock ? 'Kh√¥ng gi·ªõi h·∫°n' : result.quantity
    });
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t t·ªìn kho:", error);
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t t·ªìn kho", error: error.message });
  }
});

module.exports = router