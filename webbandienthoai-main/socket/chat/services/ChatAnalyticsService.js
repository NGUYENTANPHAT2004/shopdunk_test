/**
 * Service x·ª≠ l√Ω th·ªëng k√™ v√† ph√¢n t√≠ch d·ªØ li·ªáu chat
 */
const { 
    ChatMessage, 
    ChatSession, 
    ChatAnalytics 
  } = require('../../../models/Chatmodel');
  
  /**
   * C·∫≠p nh·∫≠t th·ªëng k√™ h√†ng ng√†y
   * @param {Date} date - Ng√†y c·∫ßn c·∫≠p nh·∫≠t (m·∫∑c ƒë·ªãnh l√† h√¥m nay)
   * @returns {Promise<Object>} - D·ªØ li·ªáu th·ªëng k√™
   */
  const updateDailyAnalytics = async (date = new Date()) => {
    try {
      // Chu·∫©n h√≥a ng√†y (ch·ªâ l·∫•y ng√†y, kh√¥ng l·∫•y gi·ªù)
      const normalizedDate = new Date(date);
      normalizedDate.setHours(0, 0, 0, 0);
      
      // Ng√†y h√¥m sau
      const nextDay = new Date(normalizedDate);
      nextDay.setDate(nextDay.getDate() + 1);
      
      console.log(`üìä C·∫≠p nh·∫≠t th·ªëng k√™ chat ng√†y ${normalizedDate.toLocaleDateString()}`);
      
      // ƒê·∫øm s·ªë l∆∞·ª£ng phi√™n chat trong ng√†y
      const sessionCount = await ChatSession.countDocuments({
        startTime: { $gte: normalizedDate, $lt: nextDay }
      });
      
      // ƒê·∫øm s·ªë l∆∞·ª£ng tin nh·∫Øn trong ng√†y
      const messageCount = await ChatMessage.countDocuments({
        createdAt: { $gte: normalizedDate, $lt: nextDay }
      });
      
      // ƒê·∫øm s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
      const authenticatedUsers = await ChatSession.countDocuments({
        startTime: { $gte: normalizedDate, $lt: nextDay },
        userId: { $ne: null }
      });
      
      // ƒê·∫øm s·ªë l∆∞·ª£ng kh√°ch
      const guestUsers = await ChatSession.countDocuments({
        startTime: { $gte: normalizedDate, $lt: nextDay },
        userId: null
      });
      
      // T√≠nh t·ª∑ l·ªá ph·∫£n h·ªìi t√≠ch c·ª±c
      const feedbackMessages = await ChatMessage.find({
        createdAt: { $gte: normalizedDate, $lt: nextDay },
        'feedback.isHelpful': { $exists: true }
      });
      
      let positiveResponseRate = 0;
      if (feedbackMessages.length > 0) {
        const positiveCount = feedbackMessages.filter(msg => msg.feedback.isHelpful).length;
        positiveResponseRate = (positiveCount / feedbackMessages.length) * 100;
      }
      
      // ƒê·∫øm ngu·ªìn ph·∫£n h·ªìi
      const responseSources = {
        training: await ChatMessage.countDocuments({
          createdAt: { $gte: normalizedDate, $lt: nextDay },
          'response.source': 'training'
        }),
        deepseek: await ChatMessage.countDocuments({
          createdAt: { $gte: normalizedDate, $lt: nextDay },
          'response.source': 'deepseek'
        }),
        claude: await ChatMessage.countDocuments({
          createdAt: { $gte: normalizedDate, $lt: nextDay },
          'response.source': 'claude'
        }),
        fallback: await ChatMessage.countDocuments({
          createdAt: { $gte: normalizedDate, $lt: nextDay },
          'response.source': 'fallback'
        })
      };
      
      // Danh s√°ch c√¢u h·ªèi kh√¥ng tr·∫£ l·ªùi ƒë∆∞·ª£c
      const unansweredMessages = await ChatMessage.find({
        createdAt: { $gte: normalizedDate, $lt: nextDay },
        isUnanswered: true,
        sender: 'user'
      }, 'message');
      
      // ƒê·∫øm v√† nh√≥m c√°c c√¢u h·ªèi kh√¥ng tr·∫£ l·ªùi ƒë∆∞·ª£c
      const unansweredQuestions = [];
      const unansweredCount = {};
      
      unansweredMessages.forEach(msg => {
        const question = msg.message.trim();
        if (unansweredCount[question]) {
          unansweredCount[question]++;
        } else {
          unansweredCount[question] = 1;
        }
      });
      
      // Chuy·ªÉn ƒë·∫øm th√†nh m·∫£ng v√† s·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng
      for (const question in unansweredCount) {
        unansweredQuestions.push({
          question,
          count: unansweredCount[question]
        });
      }
      
      unansweredQuestions.sort((a, b) => b.count - a.count);
      
      // T√¨m c√°c t·ª´ kh√≥a ph·ªï bi·∫øn
      const userMessages = await ChatMessage.find({
        createdAt: { $gte: normalizedDate, $lt: nextDay },
        sender: 'user'
      }, 'message');
      
      const keywords = {};
      const stopwords = ['v√†', 'ho·∫∑c', 'n·∫øu', 'th√¨', 'l√†', 'c·ªßa', 'c√≥', 'kh√¥ng', 'cho', 't√¥i', 'b·∫°n', 'c√°c'];
      
      userMessages.forEach(msg => {
        const words = msg.message.toLowerCase()
          .replace(/[.,;:?!()]/g, '')
          .split(/\s+/)
          .filter(word => word.length > 3 && !stopwords.includes(word));
        
        words.forEach(word => {
          if (keywords[word]) {
            keywords[word]++;
          } else {
            keywords[word] = 1;
          }
        });
      });
      
      // Chuy·ªÉn t·ª´ kh√≥a th√†nh m·∫£ng v√† s·∫Øp x·∫øp
      const popularKeywords = [];
      
      for (const keyword in keywords) {
        if (keywords[keyword] > 1) { // Ch·ªâ l·∫•y c√°c t·ª´ kh√≥a xu·∫•t hi·ªán nhi·ªÅu h∆°n 1 l·∫ßn
          popularKeywords.push({
            keyword,
            count: keywords[keyword]
          });
        }
      }
      
      popularKeywords.sort((a, b) => b.count - a.count);
      
      // L·∫•y t·ªëi ƒëa 20 t·ª´ kh√≥a ph·ªï bi·∫øn nh·∫•t
      const top20Keywords = popularKeywords.slice(0, 20);
      
      // C·∫≠p nh·∫≠t ho·∫∑c t·∫°o b√°o c√°o
      const analytics = await ChatAnalytics.findOneAndUpdate(
        { date: normalizedDate },
        {
          sessionCount,
          messageCount,
          authenticatedUsers,
          guestUsers,
          positiveResponseRate,
          responseSources,
          unansweredQuestions: unansweredQuestions.slice(0, 20), // Top 20 c√¢u h·ªèi kh√¥ng tr·∫£ l·ªùi ƒë∆∞·ª£c
          popularKeywords: top20Keywords
        },
        { upsert: true, new: true }
      );
      
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t th·ªëng k√™ chat ng√†y ${normalizedDate.toLocaleDateString()}`);
      
      return analytics;
    } catch (error) {
      console.error('‚ùå L·ªói c·∫≠p nh·∫≠t th·ªëng k√™ chat:', error);
      throw error;
    }
  };
  
  /**
   * L·∫•y th·ªëng k√™ trong kho·∫£ng th·ªùi gian
   * @param {Date} startDate - Ng√†y b·∫Øt ƒë·∫ßu
   * @param {Date} endDate - Ng√†y k·∫øt th√∫c
   * @returns {Promise<Array>} - D·ªØ li·ªáu th·ªëng k√™
   */
  const getAnalytics = async (startDate, endDate) => {
    try {
      // Chu·∫©n h√≥a ng√†y
      const start = new Date(startDate);
      start.setHours(0, 0, 0, 0);
      
      const end = new Date(endDate);
      end.setHours(23, 59, 59, 999);
      
      // L·∫•y th·ªëng k√™
      const analytics = await ChatAnalytics.find({
        date: { $gte: start, $lte: end }
      }).sort({ date: 1 });
      
      return analytics;
    } catch (error) {
      console.error('‚ùå L·ªói l·∫•y th·ªëng k√™ chat:', error);
      throw error;
    }
  };
  
  /**
   * C·∫≠p nh·∫≠t th·ªëng k√™ cho 30 ng√†y g·∫ßn nh·∫•t
   * @returns {Promise<Object>} - K·∫øt qu·∫£ c·∫≠p nh·∫≠t
   */
  const updateRecentAnalytics = async () => {
    try {
      const today = new Date();
      const results = {
        success: 0,
        errors: []
      };
      
      // C·∫≠p nh·∫≠t 30 ng√†y g·∫ßn nh·∫•t
      for (let i = 0; i < 30; i++) {
        const date = new Date(today);
        date.setDate(date.getDate() - i);
        
        try {
          await updateDailyAnalytics(date);
          results.success++;
        } catch (error) {
          results.errors.push({
            date: date.toISOString(),
            error: error.message
          });
        }
      }
      
      return results;
    } catch (error) {
      console.error('‚ùå L·ªói c·∫≠p nh·∫≠t th·ªëng k√™ g·∫ßn ƒë√¢y:', error);
      throw error;
    }
  };
  
  /**
   * L·∫•y danh s√°ch t·ª´ kh√≥a ph·ªï bi·∫øn nh·∫•t
   * @param {number} limit - Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng t·ª´ kh√≥a
   * @returns {Promise<Array>} - Danh s√°ch t·ª´ kh√≥a
   */
  const getTopKeywords = async (limit = 10) => {
    try {
      // L·∫•y th·ªëng k√™ 30 ng√†y g·∫ßn nh·∫•t
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      const analytics = await ChatAnalytics.find({
        date: { $gte: thirtyDaysAgo }
      });
      
      // T·ªïng h·ª£p t·ª´ kh√≥a
      const keywordCounts = {};
      
      analytics.forEach(day => {
        day.popularKeywords.forEach(item => {
          if (keywordCounts[item.keyword]) {
            keywordCounts[item.keyword] += item.count;
          } else {
            keywordCounts[item.keyword] = item.count;
          }
        });
      });
      
      // Chuy·ªÉn ƒë·∫øm th√†nh m·∫£ng v√† s·∫Øp x·∫øp
      const topKeywords = [];
      
      for (const keyword in keywordCounts) {
        topKeywords.push({
          keyword,
          count: keywordCounts[keyword]
        });
      }
      
      topKeywords.sort((a, b) => b.count - a.count);
      
      return topKeywords.slice(0, limit);
    } catch (error) {
      console.error('‚ùå L·ªói l·∫•y t·ª´ kh√≥a ph·ªï bi·∫øn:', error);
      throw error;
    }
  };
  
  module.exports = {
    updateDailyAnalytics,
    getAnalytics,
    updateRecentAnalytics,
    getTopKeywords
  };