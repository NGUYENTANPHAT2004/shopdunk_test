import React, { createContext, useContext, useState } from 'react';
import axios from 'axios';
import { ToastContainer, toast } from 'react-toastify'
import 'react-toastify/dist/ReactToastify.css'
const UserContext = createContext(null);

export const UserContextProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  // üîπ Khi ·ª©ng d·ª•ng load l·∫ßn ƒë·∫ßu, l·∫•y user t·ª´ localStorage
  
  const login = async (loginData) => {
    try {
      const { data: responseData } = await axios.post('http://localhost:3005/login_auth', loginData);
      
      // Ki·ªÉm tra n·∫øu c√≥ l·ªói t·ª´ API
      if (!responseData || responseData.error) {
        throw new Error(responseData.message || "T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
      }
  
      // Hi·ªÉn th·ªã th√¥ng b√°o ƒëƒÉng nh·∫≠p th√†nh c√¥ng
      toast.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...", {
        position: "top-right",
        autoClose: 2000
      });
  
      // L∆∞u th√¥ng tin user v√†o localStorage
      localStorage.setItem("user", JSON.stringify(responseData));
      setUser(responseData);
  
      // Chuy·ªÉn h∆∞·ªõng sau khi l∆∞u user
      setTimeout(() => {
        window.location.href = "/";
      }, 2500);
      
    } catch (error) {
      // Hi·ªÉn th·ªã l·ªói c·ª• th·ªÉ t·ª´ API ho·∫∑c l·ªói m·∫∑c ƒë·ªãnh
      toast.error(error.response?.data?.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i! Ki·ªÉm tra l·∫°i t√†i kho·∫£n/m·∫≠t kh·∫©u.", {
        position: "top-right",
        autoClose: 3000
      });
  
      console.error("L·ªói ƒëƒÉng nh·∫≠p:", error);
    }
  };
  

  const register = async (registerData) => {
    try {
      const { data: responseData } = await axios.post('http://localhost:3005/register_auth', registerData);
      
      if (!responseData || responseData.error) {
        throw new Error(responseData.message || "T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u ƒë√£ t·ªìn t·∫°i!");
      }
  
      // Hi·ªÉn th·ªã th√¥ng b√°o ƒëƒÉng k√Ω th√†nh c√¥ng
      toast.success("ƒêƒÉng k√Ω th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...", {
        position: "top-right",
        autoClose: 2000
      });
  
      // L∆∞u user v√†o state
      setUser(responseData);
  
      // Chuy·ªÉn h∆∞·ªõng sau 2.5 gi√¢y
      setTimeout(() => {
        window.location.href = "/";
      }, 2500);
      
    } catch (error) {
      // Hi·ªÉn th·ªã l·ªói t·ª´ API n·∫øu c√≥, ho·∫∑c th√¥ng b√°o m·∫∑c ƒë·ªãnh
      toast.error(error.response?.data?.message || "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i ho·∫∑c c√≥ l·ªói x·∫£y ra!", {
        position: "top-right",
        autoClose: 3000
      });
  
      console.error("L·ªói ƒëƒÉng k√Ω:", error);
    }
  };
  

  const getUser = () => {
    try {
      const user = localStorage.getItem("user");
      if (!user) return null; // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, tr·∫£ v·ªÅ null
  
      const parsedUser = JSON.parse(user);
  
      // Ki·ªÉm tra username c√≥ t·ªìn t·∫°i trong `parsedUser` hay kh√¥ng
      return parsedUser?.user?.username || parsedUser?.username || null;
    } catch (error) {
      console.error("Error parsing user data:", error);
      return null;
    }
  };
  

  const logout = () => {
    if (localStorage.getItem('user')) {
      localStorage.removeItem('user');
      setUser(null);
      window.dispatchEvent(new Event("userLogout"));
      alert("ƒêƒÉng xu·∫•t th√†nh c√¥ng");
    } else {
      alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p");
    }
  };
  const loginWithSocial = async (provider, token) => {
    try {
      const { data } = await axios.post(`http://localhost:3005/auth/${provider}`, { token });
      localStorage.setItem('user', JSON.stringify(data));
      toast.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...", {
        position: "top-right",
        autoClose: 2000
      });
      setTimeout(() => {
        window.location.href = "/";
      }, 2500);
    } catch (error) {
      alert(`ƒêƒÉng nh·∫≠p v·ªõi ${provider} th·∫•t b·∫°i`);
    }
  };

  return (
    <UserContext.Provider value={{ login, register, getUser, logout,loginWithSocial,user }}>
      {children}
    </UserContext.Provider>
  );
};

export const useUserContext = () => {
  const context = useContext(UserContext);
  if (!context) {
    throw new Error('useUserContext must be used within a UserContextProvider');
  }
  return context;
};