const router = require('express').Router()
const { ProductSizeStock } = require('../models/ProductSizeStockmodel');
const ChitietSp = require('../models/chitietSpModel');
const DungLuong = require('../models/DungLuongModel');
const MauSac = require('../models/MauSacModel');
const LoaiSP = require('../models/LoaiSanPham');
// Th√™m v√†o ƒë·∫ßu file stockrouter.js
const db = require('../models/db');
// C·∫£i thi·ªán API /tonkho/sanpham v·ªõi ph√¢n trang v√† aggregate
router.get('/tonkho/sanpham', async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 50; // L·∫•y 50 s·∫£n ph·∫©m m·ªói l·∫ßn
    const skip = (page - 1) * limit;

    // S·ª≠ d·ª•ng aggregation ƒë·ªÉ gi·∫£m s·ªë l∆∞·ª£ng truy v·∫•n
    const results = await ProductSizeStock.aggregate([
      // Lookup ƒë·ªÉ join v·ªõi th√¥ng tin s·∫£n ph·∫©m
      {
        $lookup: {
          from: 'chitietsps',
          localField: 'productId',
          foreignField: '_id',
          as: 'product'
        }
      },
      // Unwind ƒë·ªÉ l·∫•y ra t·ª´ng s·∫£n ph·∫©m
      { $unwind: '$product' },
      // Ch·ªâ l·∫•y s·∫£n ph·∫©m kh√¥ng b·ªã x√≥a
      { $match: { 'product.isDeleted': false } },
      // Lookup ƒë·ªÉ join v·ªõi th√¥ng tin dung l∆∞·ª£ng
      {
        $lookup: {
          from: 'dungluongs',
          localField: 'dungluongId',
          foreignField: '_id',
          as: 'dungluong'
        }
      },
      // Unwind ƒë·ªÉ l·∫•y ra t·ª´ng dung l∆∞·ª£ng (n·∫øu c√≥)
      {
        $unwind: {
          path: '$dungluong',
          preserveNullAndEmptyArrays: true
        }
      },
      // Lookup ƒë·ªÉ join v·ªõi th√¥ng tin m√†u s·∫Øc
      {
        $lookup: {
          from: 'mausacs',
          localField: 'mausacId',
          foreignField: '_id',
          as: 'mausac'
        }
      },
      // Unwind ƒë·ªÉ l·∫•y ra t·ª´ng m√†u s·∫Øc (n·∫øu c√≥)
      {
        $unwind: {
          path: '$mausac',
          preserveNullAndEmptyArrays: true
        }
      },
      // Nh√≥m d·ªØ li·ªáu theo s·∫£n ph·∫©m
      {
        $group: {
          _id: '$productId',
          name: { $first: '$product.name' },
          image: { $first: '$product.image' },
          price: { $first: '$product.price' },
          variants: {
            $push: {
              dungluongId: '$dungluongId',
              dungluongName: { $ifNull: ['$dungluong.name', 'M·∫∑c ƒë·ªãnh'] },
              mausacId: '$mausacId',
              mausacName: { $ifNull: ['$mausac.name', 'M·∫∑c ƒë·ªãnh'] },
              quantity: { $ifNull: ['$quantity', 0] },
              price: { $ifNull: ['$mausac.price', 0] },
              unlimitedStock: { $ifNull: ['$unlimitedStock', false] }
            }
          }
        }
      },
      // S·∫Øp x·∫øp theo t√™n s·∫£n ph·∫©m
      { $sort: { name: 1 } },
      // Ph√¢n trang
      { $skip: skip },
      { $limit: limit }
    ]);

    // L·∫•y t·ªïng s·ªë s·∫£n ph·∫©m ƒë·ªÉ ph√¢n trang
    const totalItems = await ProductSizeStock.aggregate([
      {
        $lookup: {
          from: 'chitietsps',
          localField: 'productId',
          foreignField: '_id',
          as: 'product'
        }
      },
      { $unwind: '$product' },
      { $match: { 'product.isDeleted': false } },
      { $group: { _id: '$productId' } },
      { $count: 'total' }
    ]);

    res.json({
      products: results,
      pagination: {
        total: totalItems.length > 0 ? totalItems[0].total : 0,
        page,
        limit
      }
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y t·ªìn kho s·∫£n ph·∫©m:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
});

router.post('/stock/add', async (req, res) => {
  try {
    console.log("üöÄ D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ request:", req.body);

    let { productId, dungluongId, mausacId, quantity } = req.body;

    // Ki·ªÉm tra productId (b·∫Øt bu·ªôc)
    if (!productId) {
      return res.status(400).json({ message: "Thi·∫øu productId" });
    }

    // N·∫øu dungluongId ho·∫∑c mausacId l√† r·ªóng (""), th√¨ ƒë·∫∑t th√†nh null
    if (!dungluongId) dungluongId = null;
    if (!mausacId) mausacId = null;

    let existingStock = await ProductSizeStock.findOne({ productId, dungluongId, mausacId });

    if (!existingStock) {
      const sku = `${productId}-${dungluongId || 'default'}-${mausacId || 'default'}`;
      const newStock = new ProductSizeStock({
        productId,
        dungluongId,
        mausacId,
        quantity: quantity !== undefined ? quantity : null,
        sku
      });
      await newStock.save();
      return res.status(201).json({ message: "Th√™m t·ªìn kho th√†nh c√¥ng", stock: newStock });
    } else {
      existingStock.quantity = quantity;
      await existingStock.save();
      return res.status(200).json({ message: "S·ªë l∆∞·ª£ng t·ªìn kho ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh", stock: existingStock });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'L·ªói c·∫≠p nh·∫≠t t·ªìn kho', error });
  }
});

router.get('/stock/:productId/:dungluongId/:mausacId', async (req, res) => {
  try {
    const { productId, dungluongId, mausacId } = req.params;
    const stock = await ProductSizeStock.findOne({ productId, dungluongId, mausacId });
    console.log(stock);
    if (!stock) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y t·ªìn kho' });

    res.json({
      stock: stock.unlimitedStock ? 'Kh√¥ng gi·ªõi h·∫°n' : stock.quantity,
      unlimitedStock: stock.unlimitedStock
    });

  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'L·ªói l·∫•y t·ªìn kho', error });
  }
});
// Thay ƒë·ªïi trong routes/stockrouter.js
// C·∫≠p nh·∫≠t route /stock/update
router.post('/stock/update', async (req, res) => {
  const session = await db.mongoose.startSession();
  session.startTransaction();
  
  try {
    const { productId, dungluongId, mausacId, quantity } = req.body;
    
    // T√¨m v√† ki·ªÉm tra t·ªìn kho trong m·ªôt transaction
    const stock = await ProductSizeStock.findOne({
      productId,
      dungluongId: dungluongId || null,
      mausacId: mausacId || null
    }).session(session);
    
    if (!stock) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ s·∫£n ph·∫©m" });
    }
    
    if (!stock.unlimitedStock && stock.quantity < quantity) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: "H√†ng t·ªìn kho kh√¥ng ƒë·ªß" });
    }
    
    // C·∫≠p nh·∫≠t t·ªìn kho
    if (!stock.unlimitedStock) {
      stock.quantity -= quantity;
      await stock.save({ session });
    }
    
    await session.commitTransaction();
    session.endSession();
    
    return res.status(200).json({ 
      message: "C·∫≠p nh·∫≠t t·ªìn kho th√†nh c√¥ng", 
      stock: stock.unlimitedStock ? 'Kh√¥ng gi·ªõi h·∫°n' : stock.quantity 
    });
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    console.error(error);
    return res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t t·ªìn kho", error: error.message });
  }
});
router.get('/stock/product/:productId', async (req, res) => {
  try {
    const { productId } = req.params;
    
    const stocks = await ProductSizeStock.find({ productId });
    
    res.json({ 
      success: true,
      stocks 
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y th√¥ng tin t·ªìn kho:', error);
    res.status(500).json({ 
      success: false,
      message: 'L·ªói khi l·∫•y th√¥ng tin t·ªìn kho', 
      error: error.message 
    });
  }
});

module.exports = router