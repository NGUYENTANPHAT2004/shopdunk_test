/**
 * Controller x·ª≠ l√Ω ch√≠nh cho ch·ª©c nƒÉng chat
 */
const {
  ChatMessage,
  ChatSession,
  ChatTraining
} = require('../../models/Chatmodel');
const axios = require('axios');

/**
 * T·∫°o phi√™n chat m·ªõi
 * @param {Object} userData - Th√¥ng tin ng∆∞·ªùi d√πng
 * @param {Object} clientInfo - Th√¥ng tin IP, user agent
 * @returns {Promise<Object>} - Th√¥ng tin phi√™n chat m·ªõi
 */
const createSession = async (userData, clientInfo) => {
  try {
    // Validate input - Allow creating sessions with minimal information
    // Removed strict validation to avoid authentication issues
    const sessionData = {
      clientInfo: clientInfo || {}
    };

    // N·∫øu user ƒë√£ ƒëƒÉng nh·∫≠p, th√™m ID user v√†o
    if (userData && userData.userId) {
      sessionData.userId = userData.userId;
    } else if (userData && userData.guestInfo) {
      sessionData.guestInfo = userData.guestInfo;
    }

    const session = new ChatSession(sessionData);
    await session.save();

    console.log(`‚úÖ ƒê√£ t·∫°o phi√™n chat m·ªõi: ${session._id}`);
    return session;
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o phi√™n chat:', error);
    throw error;
  }
};

/**
 * K·∫øt th√∫c phi√™n chat
 * @param {string} sessionId - ID phi√™n chat
 * @returns {Promise<Object>} - Th√¥ng tin phi√™n chat ƒë√£ k·∫øt th√∫c
 */
const endSession = async (sessionId) => {
  try {
    if (!sessionId) {
      throw new Error('Session ID is required');
    }

    const session = await ChatSession.findByIdAndUpdate(
      sessionId,
      {
        endTime: new Date(),
        status: 'ended'
      },
      { new: true }
    );

    if (!session) {
      throw new Error('Session not found');
    }

    console.log(`‚úÖ ƒê√£ k·∫øt th√∫c phi√™n chat: ${sessionId}`);
    return session;
  } catch (error) {
    console.error('‚ùå L·ªói khi k·∫øt th√∫c phi√™n chat:', error);
    throw error;
  }
};

/**
 * L∆∞u tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
 * @param {string} sessionId - ID phi√™n chat
 * @param {string} message - N·ªôi dung tin nh·∫Øn
 * @param {string|null} userId - ID ng∆∞·ªùi d√πng (n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p)
 * @param {Object|null} guestInfo - Th√¥ng tin kh√°ch (n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p)
 * @param {Object} clientInfo - Th√¥ng tin thi·∫øt b·ªã
 * @returns {Promise<Object>} - Th√¥ng tin tin nh·∫Øn ƒë√£ l∆∞u
 */
const saveUserMessage = async (sessionId, message, userId = null, guestInfo = null, clientInfo = {}) => {
  try {
    if (!sessionId) {
      throw new Error('Session ID is required');
    }

    if (!message) {
      throw new Error('Message content is required');
    }

    const startTime = Date.now();

    const messageData = {
      sessionId,
      message,
      sender: 'user',
      clientInfo: clientInfo || {}
    };

    if (userId) {
      messageData.userId = userId;
    } else if (guestInfo) {
      messageData.guestInfo = guestInfo;
    }

    const chatMessage = new ChatMessage(messageData);
    await chatMessage.save();

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng tin nh·∫Øn trong phi√™n chat
    await ChatSession.findByIdAndUpdate(
      sessionId,
      { $inc: { messageCount: 1 } }
    );

    const processingTime = Date.now() - startTime;

    // C·∫≠p nh·∫≠t th·ªùi gian x·ª≠ l√Ω
    await ChatMessage.findByIdAndUpdate(
      chatMessage._id,
      { processingTime }
    );

    return chatMessage;
  } catch (error) {
    console.error('‚ùå L·ªói khi l∆∞u tin nh·∫Øn:', error);
    throw error;
  }
};

/**
 * L∆∞u ph·∫£n h·ªìi t·ª´ AI
 * @param {string} sessionId - ID phi√™n chat
 * @param {string} message - N·ªôi dung tin nh·∫Øn 
 * @param {string} source - Ngu·ªìn tin nh·∫Øn (training, groq, claude, fallback)
 * @param {string|null} trainingMatchId - ID d·ªØ li·ªáu training ƒë∆∞·ª£c s·ª≠ d·ª•ng
 * @returns {Promise<Object>} - Th√¥ng tin tin nh·∫Øn ƒë√£ l∆∞u
 */
const saveAIResponse = async (sessionId, message, source = 'fallback', trainingMatchId = null) => {
  try {
    if (!sessionId) {
      throw new Error('Session ID is required');
    }

    if (!message) {
      throw new Error('Message content is required');
    }

    const startTime = Date.now();

    const messageData = {
      sessionId,
      message,
      sender: 'ai',
      response: {
        text: message,
        source,
        trainingMatchId
      }
    };

    const chatMessage = new ChatMessage(messageData);
    await chatMessage.save();

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng tin nh·∫Øn trong phi√™n chat
    await ChatSession.findByIdAndUpdate(
      sessionId,
      { $inc: { messageCount: 1 } }
    );

    const processingTime = Date.now() - startTime;

    // C·∫≠p nh·∫≠t th·ªùi gian x·ª≠ l√Ω
    await ChatMessage.findByIdAndUpdate(
      chatMessage._id,
      { processingTime }
    );

    return chatMessage;
  } catch (error) {
    console.error('‚ùå L·ªói khi l∆∞u ph·∫£n h·ªìi AI:', error);
    throw error;
  }
};

/**
 * T√¨m c√¢u tr·∫£ l·ªùi t·ªët nh·∫•t t·ª´ d·ªØ li·ªáu training
 * @param {string} question - C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
 * @returns {Promise<Object|null>} - D·ªØ li·ªáu training ph√π h·ª£p nh·∫•t ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
 */
const findBestTrainingMatch = async (question) => {
  try {
    if (!question) {
      return null;
    }

    // S·ª≠ d·ª•ng MongoDB text search
    const textSearchResults = await ChatTraining.find(
      {
        $text: { $search: question },
        isActive: true
      },
      { score: { $meta: "textScore" } }
    )
      .sort({ score: { $meta: "textScore" } })
      .limit(5);

    // N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ ho·∫∑c ƒëi·ªÉm th·∫•p, tr·∫£ v·ªÅ null
    if (textSearchResults.length === 0 || textSearchResults[0]._doc.score < 1.0) {
      return null;
    }

    // C·∫≠p nh·∫≠t s·ªë l·∫ßn s·ª≠ d·ª•ng
    await ChatTraining.findByIdAndUpdate(
      textSearchResults[0]._id,
      { $inc: { useCount: 1 } }
    );

    return textSearchResults[0];
  } catch (error) {
    console.error('‚ùå L·ªói khi t√¨m ki·∫øm trong d·ªØ li·ªáu training:', error);
    return null;
  }
};

/**
 * G·ªçi API Groq
 * @param {string} message - Tin nh·∫Øn ng∆∞·ªùi d√πng
 * @returns {Promise<string|null>} - Ph·∫£n h·ªìi t·ª´ Groq ho·∫∑c null n·∫øu l·ªói
 */
const callGroqAPI = async (message) => {
  try {
    const apiKey = process.env.GROQ_API_KEY.trim();

    console.log('üì£ ƒêang g·ªçi Groq API v·ªõi tin nh·∫Øn:', message);

    const response = await axios.post(
      'https://api.groq.com/openai/v1/chat/completions',
      {
        model: "llama3-70b-8192",
        messages: [
          {
            role: "system",
            content: "B·∫°n l√† tr·ª£ l√Ω AI th√¢n thi·ªán c·ªßa Shopdunk.Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, vƒÉn phong ng·∫Øn g·ªçn, l·ªãch s·ª± v√† d·ªÖ hi·ªÉu.B·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn s·∫£n ph·∫©m, mi·ªÖn sao v·∫´n duy tr√¨ gi·ªçng ƒëi·ªáu chuy√™n nghi·ªáp v√† th√¢n thi·ªán."
          },
          {
            role: "user",
            content: message
          }
        ],
        temperature: 0.7,
        max_tokens: 300
      },
      {
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 15000 // TƒÉng timeout l√™n 15 gi√¢y
      }
    );

    // Log ƒë·ªÉ debug
    console.log('Response status:', response.status);
    console.log('Response structure:', Object.keys(response.data));

    // Truy c·∫≠p d·ªØ li·ªáu ƒë√∫ng c√°ch theo c·∫•u tr√∫c response 
    if (response.data && response.data.choices && response.data.choices.length > 0
      && response.data.choices[0].message && response.data.choices[0].message.content) {
      return response.data.choices[0].message.content;
    } else {
      console.error('‚ùå C·∫•u tr√∫c response kh√¥ng nh∆∞ mong ƒë·ª£i:', response.data);
      throw new Error('Invalid response structure');
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ªçi Groq API:', error.message);

    // Log th√™m chi ti·∫øt v·ªÅ l·ªói
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    } else if (error.request) {
      console.error('No response received:', error.request);
    }

    // Fallback to pre-defined responses if API call fails
    const fallbackResponses = {
      "iphone": "Shopdunk c√≥ ƒë·∫ßy ƒë·ªß c√°c d√≤ng iPhone m·ªõi nh·∫•t, bao g·ªìm iPhone 15 Pro, iPhone 15, iPhone 14 v√† iPhone SE. Ch√∫ng t√¥i cam k·∫øt ch·ªâ kinh doanh s·∫£n ph·∫©m ch√≠nh h√£ng Apple v·ªõi ƒë·∫ßy ƒë·ªß b·∫£o h√†nh v√† h·ªó tr·ª£ sau b√°n h√†ng.",
      "macbook": "T·∫°i Shopdunk, ch√∫ng t√¥i cung c·∫•p t·∫•t c·∫£ c√°c d√≤ng MacBook, bao g·ªìm MacBook Air v√† MacBook Pro v·ªõi chip M2/M3. T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu l√† h√†ng ch√≠nh h√£ng Apple v√† ƒë∆∞·ª£c b·∫£o h√†nh 12 th√°ng.",
      "ipad": "Shopdunk c√≥ ƒë·∫ßy ƒë·ªß c√°c d√≤ng iPad, bao g·ªìm iPad, iPad Air, iPad Pro v√† iPad Mini. T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu l√† h√†ng ch√≠nh h√£ng Apple v·ªõi ƒë·∫ßy ƒë·ªß b·∫£o h√†nh.",
      "apple watch": "Ch√∫ng t√¥i c√≥ ƒë·∫ßy ƒë·ªß c√°c d√≤ng Apple Watch, t·ª´ Apple Watch Series 9, Apple Watch Ultra ƒë·∫øn Apple Watch SE. T·∫•t c·∫£ ƒë·ªÅu l√† s·∫£n ph·∫©m ch√≠nh h√£ng Apple."
    };

    // T√¨m t·ª´ kh√≥a trong tin nh·∫Øn
    const messageLC = message.toLowerCase();
    for (const [keyword, reply] of Object.entries(fallbackResponses)) {
      if (messageLC.includes(keyword.toLowerCase())) {
        return reply;
      }
    }

    return "Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ li√™n h·ªá tr·ª±c ti·∫øp v·ªõi Shopdunk qua hotline 1900.6626 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ nhanh nh·∫•t.";
  }
};

/**
 * Gi·∫£ l·∫≠p API Claude v√¨ kh√¥ng c√≥ key th·ª±c
 * @param {string} message - Tin nh·∫Øn ng∆∞·ªùi d√πng
 * @returns {Promise<string>} - Ph·∫£n h·ªìi gi·∫£ l·∫≠p
 */
const callClaudeAPI = async (message) => {
  try {
    // T·∫°o ph·∫£n h·ªìi gi·∫£ l·∫≠p
    console.log('üì£ ƒêang s·ª≠ d·ª•ng Claude gi·∫£ l·∫≠p cho tin nh·∫Øn:', message);

    // C√°c lo·∫°i c√¢u h·ªèi ph·ªï bi·∫øn kh√°c v·ªõi Groq ƒë·ªÉ tƒÉng s·ª± ƒëa d·∫°ng
    const responses = {
      "so s√°nh": "So s√°nh c√°c s·∫£n ph·∫©m Apple l√† m·ªôt vi·ªác ph·ª©c t·∫°p v√¨ m·ªói model ƒë·ªÅu c√≥ ∆∞u ƒëi·ªÉm ri√™ng. T·∫°i Shopdunk, ch√∫ng t√¥i lu√¥n t∆∞ v·∫•n s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t v·ªõi nhu c·∫ßu v√† ng√¢n s√°ch c·ªßa kh√°ch h√†ng. B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m v·ªÅ nhu c·∫ßu s·ª≠ d·ª•ng ƒë·ªÉ t√¥i t∆∞ v·∫•n chi ti·∫øt h∆°n.",
      "gi√° r·∫ª": "T·∫°i Shopdunk, ch√∫ng t√¥i c√≥ nhi·ªÅu ch∆∞∆°ng tr√¨nh ∆∞u ƒë√£i gi√∫p kh√°ch h√†ng ti·∫øp c·∫≠n s·∫£n ph·∫©m Apple v·ªõi gi√° t·ªët nh·∫•t. Ch√∫ng t√¥i th∆∞·ªùng xuy√™n c√≥ c√°c ch∆∞∆°ng tr√¨nh gi·∫£m gi√°, thu c≈© ƒë·ªïi m·ªõi v√† tr·∫£ g√≥p 0%. B·∫°n c√≥ th·ªÉ gh√© thƒÉm website shopdunk.com ƒë·ªÉ xem c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i m·ªõi nh·∫•t.",
      "ph·ª• ki·ªán": "Shopdunk cung c·∫•p ƒë·∫ßy ƒë·ªß c√°c ph·ª• ki·ªán ch√≠nh h√£ng cho thi·∫øt b·ªã Apple nh∆∞ ·ªëp l∆∞ng, d√°n c∆∞·ªùng l·ª±c, s·∫°c, c√°p, tai nghe v√† nhi·ªÅu ph·ª• ki·ªán kh√°c. T·∫•t c·∫£ ƒë·ªÅu l√† s·∫£n ph·∫©m ch√≠nh h√£ng v·ªõi ch·∫•t l∆∞·ª£ng ƒë·∫£m b·∫£o.",
      "c√†i ƒë·∫∑t": "Shopdunk h·ªó tr·ª£ kh√°ch h√†ng c√†i ƒë·∫∑t v√† thi·∫øt l·∫≠p c√°c ·ª©ng d·ª•ng, d·ªãch v·ª• tr√™n thi·∫øt b·ªã Apple mi·ªÖn ph√≠. Nh√¢n vi√™n c·ªßa ch√∫ng t√¥i s·∫Ω h∆∞·ªõng d·∫´n b·∫°n c√°ch s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c∆° b·∫£n v√† n√¢ng cao ƒë·ªÉ t·ªëi ∆∞u tr·∫£i nghi·ªám.",
      "s·ª≠a ch·ªØa": "D·ªãch v·ª• s·ª≠a ch·ªØa t·∫°i Shopdunk ƒë∆∞·ª£c th·ª±c hi·ªán b·ªüi c√°c k·ªπ thu·∫≠t vi√™n c√≥ ch·ª©ng ch·ªâ Apple, s·ª≠ d·ª•ng linh ki·ªán ch√≠nh h√£ng 100%. Ch√∫ng t√¥i c√≥ trung t√¢m b·∫£o h√†nh t·∫°i nhi·ªÅu t·ªânh th√†nh tr√™n c·∫£ n∆∞·ªõc.",
      "h√†ng c≈©": "Shopdunk c√≥ ch∆∞∆°ng tr√¨nh iPhone ƒë√£ qua s·ª≠ d·ª•ng (CPO) ƒë∆∞·ª£c ki·ªÉm tra k·ªπ l∆∞·ª°ng, b·∫£o h√†nh ch√≠nh h√£ng v√† c√≥ gi√° r·∫ª h∆°n so v·ªõi s·∫£n ph·∫©m m·ªõi. ƒê√¢y l√† l·ª±a ch·ªçn t·ªët n·∫øu b·∫°n mu·ªën s·ªü h·ªØu iPhone ch√≠nh h√£ng v·ªõi ng√¢n s√°ch h·ª£p l√Ω.",
      "t∆∞ v·∫•n": "ƒê·ªôi ng≈© t∆∞ v·∫•n c·ªßa Shopdunk ƒë∆∞·ª£c ƒë√†o t·∫°o b√†i b·∫£n v·ªÅ s·∫£n ph·∫©m Apple v√† lu√¥n c·∫≠p nh·∫≠t ki·∫øn th·ª©c m·ªõi nh·∫•t. Ch√∫ng t√¥i s·∫Ω t∆∞ v·∫•n kh√°ch h√†ng l·ª±a ch·ªçn s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t v·ªõi nhu c·∫ßu v√† ng√¢n s√°ch.",
      "ch√≠nh s√°ch": "Shopdunk cam k·∫øt v·ªÅ ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m ch√≠nh h√£ng, gi√° c·∫£ c·∫°nh tranh, ch·∫ø ƒë·ªô b·∫£o h√†nh theo ti√™u chu·∫©n Apple v√† h·ªó tr·ª£ kh√°ch h√†ng t·∫≠n t√¢m. Ch√∫ng t√¥i mong mu·ªën mang ƒë·∫øn tr·∫£i nghi·ªám mua s·∫Øm Apple t·ªët nh·∫•t cho kh√°ch h√†ng Vi·ªát Nam."
    };

    // T√¨m t·ª´ kh√≥a trong tin nh·∫Øn
    const messageLC = message.toLowerCase();
    let response = "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi Shopdunk - ƒë·∫°i l√Ω ·ªßy quy·ªÅn ch√≠nh th·ª©c c·ªßa Apple t·∫°i Vi·ªát Nam. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c s·∫£n ph·∫©m Apple, ch√≠nh s√°ch b·∫£o h√†nh, khuy·∫øn m√£i ho·∫∑c c√°c d·ªãch v·ª• kh√°c c·ªßa Shopdunk. B·∫°n c·∫ßn h·ªó tr·ª£ th√¥ng tin g√¨?";

    // Ki·ªÉm tra t·ª´ng t·ª´ kh√≥a
    for (const [keyword, reply] of Object.entries(responses)) {
      if (messageLC.includes(keyword.toLowerCase())) {
        response = reply;
        break;
      }
    }

    // Tr·∫£ v·ªÅ sau 1.5 gi√¢y ƒë·ªÉ m√¥ ph·ªèng ƒë·ªô tr·ªÖ API
    return new Promise(resolve => {
      setTimeout(() => resolve(response), 1500);
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ªçi Claude API gi·∫£ l·∫≠p:', error.message);
    return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y ngay b√¢y gi·ªù. Vui l√≤ng li√™n h·ªá v·ªõi nh√¢n vi√™n Shopdunk qua s·ªë 1900.6626 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.";
  }
};

/**
 * X·ª≠ l√Ω tin nh·∫Øn ng∆∞·ªùi d√πng v√† t·∫°o ph·∫£n h·ªìi
 * @param {string} sessionId - ID phi√™n chat
 * @param {string} message - Tin nh·∫Øn ng∆∞·ªùi d√πng
 * @param {string|null} userId - ID ng∆∞·ªùi d√πng (n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p)
 * @param {Object|null} guestInfo - Th√¥ng tin kh√°ch (n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p)
 * @param {Object} clientInfo - Th√¥ng tin thi·∫øt b·ªã
 * @returns {Promise<Object>} - Th√¥ng tin ph·∫£n h·ªìi
 */
const processMessage = async (sessionId, message, userId = null, guestInfo = null, clientInfo = {}) => {
  try {
    if (!sessionId) {
      throw new Error('Session ID is required');
    }

    if (!message) {
      throw new Error('Message content is required');
    }

    // L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng
    await saveUserMessage(sessionId, message, userId, guestInfo, clientInfo);

    // 1. T√¨m c√¢u tr·∫£ l·ªùi t·ª´ d·ªØ li·ªáu training
    const trainingMatch = await findBestTrainingMatch(message);
    if (trainingMatch) {
      console.log(`‚úÖ T√¨m th·∫•y c√¢u tr·∫£ l·ªùi t·ª´ d·ªØ li·ªáu training cho: "${message.substring(0, 30)}..."`);
      const response = await saveAIResponse(
        sessionId,
        trainingMatch.answer,
        'training',
        trainingMatch._id
      );
      return {
        message: trainingMatch.answer,
        source: 'training',
        id: response._id
      };
    }

    // 2. Th·ª≠ v·ªõi Groq API
    const groqResponse = await callGroqAPI(message);
    if (groqResponse) {
      console.log(`‚úÖ Nh·∫≠n ph·∫£n h·ªìi t·ª´ Groq cho: "${message.substring(0, 30)}..."`);
      console.log('Groq API Key:', process.env.GROQ_API_KEY);
      const response = await saveAIResponse(sessionId, groqResponse, 'groq');
      return {
        message: groqResponse,
        source: 'groq',
        id: response._id
      };
    }

    // 3. Th·ª≠ v·ªõi Claude API
    const claudeResponse = await callClaudeAPI(message);
    if (claudeResponse) {
      console.log(`‚úÖ Nh·∫≠n ph·∫£n h·ªìi t·ª´ Claude cho: "${message.substring(0, 30)}..."`);
      const response = await saveAIResponse(sessionId, claudeResponse, 'claude');
      return {
        message: claudeResponse,
        source: 'claude',
        id: response._id
      };
    }

    // 4. D√πng ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh n·∫øu t·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i
    const fallbackResponse = "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n ngay b√¢y gi·ªù. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá v·ªõi Shopdunk qua hotline 1900.6626.";
    console.log(`‚ö†Ô∏è S·ª≠ d·ª•ng ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh cho: "${message.substring(0, 30)}..."`);
    const response = await saveAIResponse(sessionId, fallbackResponse, 'fallback');

    // Mark this message as unanswered for analytics
    await ChatMessage.findOne({ sessionId, sender: 'user' })
      .sort({ createdAt: -1 })
      .limit(1)
      .updateOne({ isUnanswered: true });

    return {
      message: fallbackResponse,
      source: 'fallback',
      id: response._id
    };
  } catch (error) {
    console.error('‚ùå L·ªói khi x·ª≠ l√Ω tin nh·∫Øn:', error);
    throw error;
  }
};

/**
 * L∆∞u ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng v·ªÅ ch·∫•t l∆∞·ª£ng tin nh·∫Øn AI
 * @param {string} messageId - ID tin nh·∫Øn
 * @param {boolean} isHelpful - Ng∆∞·ªùi d√πng th·∫•y h·ªØu √≠ch kh√¥ng
 * @param {string} comment - B√¨nh lu·∫≠n th√™m
 * @returns {Promise<Object>} - Th√¥ng tin tin nh·∫Øn ƒë√£ c·∫≠p nh·∫≠t
 */
const saveFeedback = async (messageId, isHelpful, comment = '') => {
  try {
    if (!messageId) {
      throw new Error('Message ID is required');
    }

    const message = await ChatMessage.findByIdAndUpdate(
      messageId,
      {
        feedback: {
          isHelpful,
          comment
        }
      },
      { new: true }
    );

    if (!message) {
      throw new Error('Message not found');
    }

    // N·∫øu tin nh·∫Øn l√† t·ª´ training, c·∫≠p nh·∫≠t ƒë·ªô ch√≠nh x√°c
    if (message.response && message.response.source === 'training' && message.response.trainingMatchId) {
      const trainingId = message.response.trainingMatchId;

      // ƒê·∫øm s·ªë l∆∞·ª£ng ph·∫£n h·ªìi ƒë√£ nh·∫≠n
      const feedbackMessages = await ChatMessage.find({
        'response.trainingMatchId': trainingId,
        'feedback.isHelpful': { $exists: true }
      });

      if (feedbackMessages.length > 0) {
        const helpfulCount = feedbackMessages.filter(msg => msg.feedback.isHelpful).length;
        const accuracy = (helpfulCount / feedbackMessages.length) * 100;

        // C·∫≠p nh·∫≠t ƒë·ªô ch√≠nh x√°c
        await ChatTraining.findByIdAndUpdate(
          trainingId,
          { accuracy }
        );
      }
    }

    return message;
  } catch (error) {
    console.error('‚ùå L·ªói khi l∆∞u ph·∫£n h·ªìi:', error);
    throw error;
  }
};

/**
 * L·∫•y l·ªãch s·ª≠ chat c·ªßa m·ªôt phi√™n
 * @param {string} sessionId - ID phi√™n chat
 * @returns {Promise<Array>} - Danh s√°ch tin nh·∫Øn
 */
const getSessionHistory = async (sessionId) => {
  try {
    if (!sessionId) {
      throw new Error('Session ID is required');
    }

    return await ChatMessage.find({ sessionId })
      .sort({ createdAt: 1 })
      .lean();
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ chat:', error);
    throw error;
  }
};

module.exports = {
  createSession,
  endSession,
  processMessage,
  saveFeedback,
  getSessionHistory,
  saveUserMessage,
  saveAIResponse
};