// socket/adminnotifi.js
const { ProductSizeStock } = require('../models/ProductSizeStockmodel');

/**
 * Thi·∫øt l·∫≠p socket admin cho vi·ªác theo d√µi t·ªìn kho
 * @param {Object} io - Socket.io instance
 */
const setupAdminSocket = (io) => {
  const adminNamespace = io.of('/admin');
  
  adminNamespace.on('connection', (socket) => {
    console.log(`‚úÖ Admin k·∫øt n·ªëi: ${socket.id}`);
    
    // X·ª≠ l√Ω ki·ªÉm tra t·ªìn kho
    socket.on('check_stock', async () => {
      try {
        console.log("üì¶ Admin ƒëang ki·ªÉm tra t·ªìn kho...");

        // T√¨m s·∫£n ph·∫©m c√≥ t·ªìn kho th·∫•p (d∆∞·ªõi 5 s·∫£n ph·∫©m)
        const lowStockProducts = await ProductSizeStock.find({
          unlimitedStock: false,
          quantity: { $lte: 5 }
        }).populate([
          { path: 'productId', select: 'name image price' },
          { path: 'dungluongId', select: 'name' },
          { path: 'mausacId', select: 'name' }
        ]);

        // ƒê·ªãnh d·∫°ng s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã t·ªët h∆°n ·ªü frontend
        const formatProduct = (product) => ({
          id: product._id,
          name: product.productId ? product.productId.name : 'S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh',
          image: product.productId ? product.productId.image : null,
          sku: product.sku || `${product.productId?._id}-${product.dungluongId?._id || 'n/a'}-${product.mausacId?._id || 'n/a'}`,
          quantity: product.quantity,
          capacity: product.dungluongId ? product.dungluongId.name : 'M·∫∑c ƒë·ªãnh',
          color: product.mausacId ? product.mausacId.name : 'M·∫∑c ƒë·ªãnh',
          threshold: product.lowStockThreshold || 5,
          price: product.productId ? product.productId.price : 0
        });

        const formattedLowStock = lowStockProducts.map(formatProduct);

        // G·ª≠i th√¥ng b√°o t·ªìn kho th·∫•p n·∫øu c√≥ s·∫£n ph·∫©m
        if (formattedLowStock.length > 0) {
          socket.emit("lowStockAlert", {
            message: "Th√¥ng b√°o: S·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng",
            products: formattedLowStock,
            count: formattedLowStock.length,
            timestamp: new Date().toISOString()
          });
          console.log(`ƒê√£ g·ª≠i th√¥ng b√°o t·ªìn kho th·∫•p: ${formattedLowStock.length} s·∫£n ph·∫©m c·∫ßn b·ªï sung`);

          // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ th√¥ng b√°o
          await ProductSizeStock.updateMany(
            { _id: { $in: lowStockProducts.map(product => product._id) } },
            { $set: { notificationSent: true, lastNotificationDate: new Date() } }
          );
        } else {
          // N·∫øu kh√¥ng c√≥ v·∫•n ƒë·ªÅ, g·ª≠i tr·∫°ng th√°i OK
          socket.emit("stockStatus", {
            message: "T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu c√≥ ƒë·ªß h√†ng t·ªìn kho",
            status: "ok",
            timestamp: new Date().toISOString()
          });
          console.log("T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu c√≥ t·ªìn kho ƒë·ªß");
        }
      } catch (error) {
        console.error("L·ªói khi ki·ªÉm tra t·ªìn kho:", error);
        socket.emit("stockError", {
          message: "L·ªói khi ki·ªÉm tra t·ªìn kho",
          error: error.message,
          timestamp: new Date().toISOString()
        });
      }
    });
    
    // X·ª≠ l√Ω ng·∫Øt k·∫øt n·ªëi
    socket.on('disconnect', (reason) => {
      console.log(`‚ùå Admin ng·∫Øt k·∫øt n·ªëi: ${socket.id}, l√Ω do: ${reason}`);
    });
  });
  
  return adminNamespace;
};

/**
 * G·ª≠i th√¥ng b√°o t·ªìn kho to√†n c·ª•c ƒë·∫øn t·∫•t c·∫£ admin
 * @param {Object} io - Socket.io instance
 * @param {Object} productData - Th√¥ng tin s·∫£n ph·∫©m
 */
const broadcastInventoryAlert = (io, productData) => {
  if (!io || !productData) return;
  
  const adminNamespace = io.of('/admin');
  
  adminNamespace.emit('lowStockAlert', {
    message: "Th√¥ng b√°o: S·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng",
    products: [productData],
    count: 1,
    timestamp: new Date().toISOString()
  });
  
  console.log(`üì¢ ƒê√£ g·ª≠i th√¥ng b√°o t·ªìn kho: ${productData.name || productData.id}`);
};

module.exports = {
  setupAdminSocket,
  broadcastInventoryAlert
};