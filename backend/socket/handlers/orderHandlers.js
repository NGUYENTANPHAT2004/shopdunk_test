// socket/handlers/orderHandlers.js
const HoaDon = require('../../models/HoaDonModel');

/**
 * X·ª≠ l√Ω th√¥ng b√°o ƒë∆°n h√†ng m·ªõi
 * @param {Object} socket - Socket connection
 * @param {Object} io - Socket.io instance
 * @param {Object} data - D·ªØ li·ªáu ƒë∆°n h√†ng
 */
const handleNewOrder = async (socket, io, data) => {
  try {
    console.log("üõí ƒê∆°n h√†ng m·ªõi ƒë∆∞·ª£c t·∫°o:", data.orderCode || data.maHDL);
    
    // Chu·∫©n h√≥a m√£ ƒë∆°n h√†ng
    const orderCode = data.orderCode || data.maHDL;
    
    // G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ admin
    io.of('/admin').emit("newOrderNotification", {
      message: "C√≥ ƒë∆°n h√†ng m·ªõi",
      orderData: {
        orderCode: orderCode,
        total: data.total || data.tongtien,
        customerName: data.customerName || data.name,
        phone: data.phone,
        time: new Date().toISOString()
      },
      timestamp: new Date().toISOString()
    });
    
    // X√°c nh·∫≠n ƒë√£ nh·∫≠n ƒë∆°n h√†ng cho ng∆∞·ªùi g·ª≠i
    socket.emit("orderReceived", { 
      success: true,
      message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n", 
      orderCode: orderCode,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error("‚ùå L·ªói khi x·ª≠ l√Ω ƒë∆°n h√†ng m·ªõi:", error);
    socket.emit("orderError", { 
      success: false,
      message: "L·ªói khi x·ª≠ l√Ω ƒë∆°n h√†ng", 
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

/**
 * X·ª≠ l√Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
 * @param {Object} socket - Socket connection
 * @param {Object} io - Socket.io instance
 * @param {Object} data - D·ªØ li·ªáu tr·∫°ng th√°i ƒë∆°n h√†ng
 */
const handleOrderStatusUpdate = async (socket, io, data) => {
  try {
    console.log(`üìù C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng ${data.orderCode}: ${data.status}`);
    
    // G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ admin
    io.of('/admin').emit("orderStatusChanged", {
      orderCode: data.orderCode,
      status: data.status,
      message: getStatusMessage(data.status),
      updatedAt: new Date().toISOString(),
      timestamp: new Date().toISOString()
    });
    
    // X√°c nh·∫≠n cho ng∆∞·ªùi g·ª≠i
    socket.emit("statusUpdateConfirmed", {
      success: true,
      message: "ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng",
      orderCode: data.orderCode,
      status: data.status,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:", error);
    socket.emit("statusUpdateError", { 
      success: false,
      message: "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng", 
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

/**
 * L·∫•y th√¥ng b√°o t∆∞∆°ng ·ª©ng v·ªõi tr·∫°ng th√°i
 * @param {string} status - Tr·∫°ng th√°i ƒë∆°n h√†ng
 * @returns {string} Th√¥ng b√°o ph√π h·ª£p
 */
function getStatusMessage(status) {
  const messages = {
    'ƒêang x·ª≠ l√Ω': 'ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω',
    'ƒê√£ thanh to√°n': 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng',
    'ƒêang giao h√†ng': 'ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c giao ƒë·∫øn kh√°ch h√†ng',
    'ƒê√£ nh·∫≠n': 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng',
    'Ho√†n th√†nh': 'ƒê∆°n h√†ng ƒë√£ ho√†n th√†nh',
    'H·ªßy ƒê∆°n H√†ng': 'ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy',
    'Tr·∫£ h√†ng/Ho√†n ti·ªÅn': 'ƒê∆°n h√†ng ƒëang trong qu√° tr√¨nh ho√†n tr·∫£',
    'Thanh to√°n th·∫•t b·∫°i': 'Thanh to√°n ƒë∆°n h√†ng kh√¥ng th√†nh c√¥ng',
    'Thanh to√°n h·∫øt h·∫°n': 'Th·ªùi gian thanh to√°n ƒë∆°n h√†ng ƒë√£ h·∫øt h·∫°n'
  };
  
  return messages[status] || 'Tr·∫°ng th√°i ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t';
}

/**
 * G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t ƒë∆°n h√†ng
 * @param {Object} io - Socket.io instance
 * @param {Object} orderData - D·ªØ li·ªáu ƒë∆°n h√†ng
 */
const sendOrderNotification = (io, orderData) => {
  if (!io || !orderData) return;
  
  const adminNamespace = io.of('/admin');
  
  if (orderData.type === 'new') {
    // Th√¥ng b√°o ƒë∆°n h√†ng m·ªõi
    adminNamespace.emit("newOrderNotification", {
      message: "C√≥ ƒë∆°n h√†ng m·ªõi",
      orderData: {
        orderCode: orderData.orderCode || orderData.maHDL,
        total: orderData.total || orderData.tongtien,
        customerName: orderData.customerName || orderData.name,
        phone: orderData.phone
      },
      timestamp: new Date().toISOString()
    });
  } else if (orderData.type === 'status') {
    // Th√¥ng b√°o thay ƒë·ªïi tr·∫°ng th√°i
    adminNamespace.emit("orderStatusChanged", {
      orderCode: orderData.orderCode,
      status: orderData.status,
      message: getStatusMessage(orderData.status),
      updatedAt: new Date().toISOString(),
      timestamp: new Date().toISOString()
    });
  }
};

module.exports = {
  handleNewOrder,
  handleOrderStatusUpdate,
  sendOrderNotification
};